// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: parsimony.proto
// Protobuf C++ Version: 5.29.3

#ifndef parsimony_2eproto_2epb_2eh
#define parsimony_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_parsimony_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_parsimony_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_parsimony_2eproto;
namespace Parsimony {
class condensed_node;
struct condensed_nodeDefaultTypeInternal;
extern condensed_nodeDefaultTypeInternal _condensed_node_default_instance_;
class data;
struct dataDefaultTypeInternal;
extern dataDefaultTypeInternal _data_default_instance_;
class mut;
struct mutDefaultTypeInternal;
extern mutDefaultTypeInternal _mut_default_instance_;
class mutation_list;
struct mutation_listDefaultTypeInternal;
extern mutation_listDefaultTypeInternal _mutation_list_default_instance_;
class node_metadata;
struct node_metadataDefaultTypeInternal;
extern node_metadataDefaultTypeInternal _node_metadata_default_instance_;
}  // namespace Parsimony
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Parsimony {

// ===================================================================


// -------------------------------------------------------------------

class node_metadata final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Parsimony.node_metadata) */ {
 public:
  inline node_metadata() : node_metadata(nullptr) {}
  ~node_metadata() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(node_metadata* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(node_metadata));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR node_metadata(
      ::google::protobuf::internal::ConstantInitialized);

  inline node_metadata(const node_metadata& from) : node_metadata(nullptr, from) {}
  inline node_metadata(node_metadata&& from) noexcept
      : node_metadata(nullptr, std::move(from)) {}
  inline node_metadata& operator=(const node_metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline node_metadata& operator=(node_metadata&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const node_metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const node_metadata* internal_default_instance() {
    return reinterpret_cast<const node_metadata*>(
        &_node_metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(node_metadata& a, node_metadata& b) { a.Swap(&b); }
  inline void Swap(node_metadata* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(node_metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  node_metadata* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<node_metadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const node_metadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const node_metadata& from) { node_metadata::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(node_metadata* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Parsimony.node_metadata"; }

 protected:
  explicit node_metadata(::google::protobuf::Arena* arena);
  node_metadata(::google::protobuf::Arena* arena, const node_metadata& from);
  node_metadata(::google::protobuf::Arena* arena, node_metadata&& from) noexcept
      : node_metadata(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCladeAnnotationsFieldNumber = 1,
  };
  // repeated string clade_annotations = 1;
  int clade_annotations_size() const;
  private:
  int _internal_clade_annotations_size() const;

  public:
  void clear_clade_annotations() ;
  const std::string& clade_annotations(int index) const;
  std::string* mutable_clade_annotations(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clade_annotations(int index, Arg_&& value, Args_... args);
  std::string* add_clade_annotations();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_clade_annotations(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& clade_annotations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_clade_annotations();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_clade_annotations() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_clade_annotations();

  public:
  // @@protoc_insertion_point(class_scope:Parsimony.node_metadata)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const node_metadata& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> clade_annotations_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class mut final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Parsimony.mut) */ {
 public:
  inline mut() : mut(nullptr) {}
  ~mut() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(mut* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(mut));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR mut(
      ::google::protobuf::internal::ConstantInitialized);

  inline mut(const mut& from) : mut(nullptr, from) {}
  inline mut(mut&& from) noexcept
      : mut(nullptr, std::move(from)) {}
  inline mut& operator=(const mut& from) {
    CopyFrom(from);
    return *this;
  }
  inline mut& operator=(mut&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mut& default_instance() {
    return *internal_default_instance();
  }
  static inline const mut* internal_default_instance() {
    return reinterpret_cast<const mut*>(
        &_mut_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(mut& a, mut& b) { a.Swap(&b); }
  inline void Swap(mut* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mut* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mut* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<mut>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const mut& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const mut& from) { mut::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(mut* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Parsimony.mut"; }

 protected:
  explicit mut(::google::protobuf::Arena* arena);
  mut(::google::protobuf::Arena* arena, const mut& from);
  mut(::google::protobuf::Arena* arena, mut&& from) noexcept
      : mut(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMutNucFieldNumber = 4,
    kChromosomeFieldNumber = 5,
    kPositionFieldNumber = 1,
    kRefNucFieldNumber = 2,
    kParNucFieldNumber = 3,
  };
  // repeated int32 mut_nuc = 4;
  int mut_nuc_size() const;
  private:
  int _internal_mut_nuc_size() const;

  public:
  void clear_mut_nuc() ;
  ::int32_t mut_nuc(int index) const;
  void set_mut_nuc(int index, ::int32_t value);
  void add_mut_nuc(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& mut_nuc() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_mut_nuc();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_mut_nuc() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_mut_nuc();

  public:
  // string chromosome = 5;
  void clear_chromosome() ;
  const std::string& chromosome() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chromosome(Arg_&& arg, Args_... args);
  std::string* mutable_chromosome();
  PROTOBUF_NODISCARD std::string* release_chromosome();
  void set_allocated_chromosome(std::string* value);

  private:
  const std::string& _internal_chromosome() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chromosome(
      const std::string& value);
  std::string* _internal_mutable_chromosome();

  public:
  // int32 position = 1;
  void clear_position() ;
  ::int32_t position() const;
  void set_position(::int32_t value);

  private:
  ::int32_t _internal_position() const;
  void _internal_set_position(::int32_t value);

  public:
  // int32 ref_nuc = 2;
  void clear_ref_nuc() ;
  ::int32_t ref_nuc() const;
  void set_ref_nuc(::int32_t value);

  private:
  ::int32_t _internal_ref_nuc() const;
  void _internal_set_ref_nuc(::int32_t value);

  public:
  // int32 par_nuc = 3;
  void clear_par_nuc() ;
  ::int32_t par_nuc() const;
  void set_par_nuc(::int32_t value);

  private:
  ::int32_t _internal_par_nuc() const;
  void _internal_set_par_nuc(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Parsimony.mut)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const mut& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> mut_nuc_;
    ::google::protobuf::internal::CachedSize _mut_nuc_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr chromosome_;
    ::int32_t position_;
    ::int32_t ref_nuc_;
    ::int32_t par_nuc_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class condensed_node final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Parsimony.condensed_node) */ {
 public:
  inline condensed_node() : condensed_node(nullptr) {}
  ~condensed_node() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(condensed_node* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(condensed_node));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR condensed_node(
      ::google::protobuf::internal::ConstantInitialized);

  inline condensed_node(const condensed_node& from) : condensed_node(nullptr, from) {}
  inline condensed_node(condensed_node&& from) noexcept
      : condensed_node(nullptr, std::move(from)) {}
  inline condensed_node& operator=(const condensed_node& from) {
    CopyFrom(from);
    return *this;
  }
  inline condensed_node& operator=(condensed_node&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const condensed_node& default_instance() {
    return *internal_default_instance();
  }
  static inline const condensed_node* internal_default_instance() {
    return reinterpret_cast<const condensed_node*>(
        &_condensed_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(condensed_node& a, condensed_node& b) { a.Swap(&b); }
  inline void Swap(condensed_node* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(condensed_node* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  condensed_node* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<condensed_node>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const condensed_node& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const condensed_node& from) { condensed_node::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(condensed_node* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Parsimony.condensed_node"; }

 protected:
  explicit condensed_node(::google::protobuf::Arena* arena);
  condensed_node(::google::protobuf::Arena* arena, const condensed_node& from);
  condensed_node(::google::protobuf::Arena* arena, condensed_node&& from) noexcept
      : condensed_node(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCondensedLeavesFieldNumber = 2,
    kNodeNameFieldNumber = 1,
  };
  // repeated string condensed_leaves = 2;
  int condensed_leaves_size() const;
  private:
  int _internal_condensed_leaves_size() const;

  public:
  void clear_condensed_leaves() ;
  const std::string& condensed_leaves(int index) const;
  std::string* mutable_condensed_leaves(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_condensed_leaves(int index, Arg_&& value, Args_... args);
  std::string* add_condensed_leaves();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_condensed_leaves(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& condensed_leaves() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_condensed_leaves();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_condensed_leaves() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_condensed_leaves();

  public:
  // string node_name = 1;
  void clear_node_name() ;
  const std::string& node_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_node_name(Arg_&& arg, Args_... args);
  std::string* mutable_node_name();
  PROTOBUF_NODISCARD std::string* release_node_name();
  void set_allocated_node_name(std::string* value);

  private:
  const std::string& _internal_node_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_name(
      const std::string& value);
  std::string* _internal_mutable_node_name();

  public:
  // @@protoc_insertion_point(class_scope:Parsimony.condensed_node)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const condensed_node& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> condensed_leaves_;
    ::google::protobuf::internal::ArenaStringPtr node_name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class mutation_list final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Parsimony.mutation_list) */ {
 public:
  inline mutation_list() : mutation_list(nullptr) {}
  ~mutation_list() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(mutation_list* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(mutation_list));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR mutation_list(
      ::google::protobuf::internal::ConstantInitialized);

  inline mutation_list(const mutation_list& from) : mutation_list(nullptr, from) {}
  inline mutation_list(mutation_list&& from) noexcept
      : mutation_list(nullptr, std::move(from)) {}
  inline mutation_list& operator=(const mutation_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline mutation_list& operator=(mutation_list&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const mutation_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const mutation_list* internal_default_instance() {
    return reinterpret_cast<const mutation_list*>(
        &_mutation_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(mutation_list& a, mutation_list& b) { a.Swap(&b); }
  inline void Swap(mutation_list* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(mutation_list* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  mutation_list* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<mutation_list>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const mutation_list& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const mutation_list& from) { mutation_list::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(mutation_list* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Parsimony.mutation_list"; }

 protected:
  explicit mutation_list(::google::protobuf::Arena* arena);
  mutation_list(::google::protobuf::Arena* arena, const mutation_list& from);
  mutation_list(::google::protobuf::Arena* arena, mutation_list&& from) noexcept
      : mutation_list(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMutationFieldNumber = 1,
  };
  // repeated .Parsimony.mut mutation = 1;
  int mutation_size() const;
  private:
  int _internal_mutation_size() const;

  public:
  void clear_mutation() ;
  ::Parsimony::mut* mutable_mutation(int index);
  ::google::protobuf::RepeatedPtrField<::Parsimony::mut>* mutable_mutation();

  private:
  const ::google::protobuf::RepeatedPtrField<::Parsimony::mut>& _internal_mutation() const;
  ::google::protobuf::RepeatedPtrField<::Parsimony::mut>* _internal_mutable_mutation();
  public:
  const ::Parsimony::mut& mutation(int index) const;
  ::Parsimony::mut* add_mutation();
  const ::google::protobuf::RepeatedPtrField<::Parsimony::mut>& mutation() const;
  // @@protoc_insertion_point(class_scope:Parsimony.mutation_list)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const mutation_list& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Parsimony::mut > mutation_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_parsimony_2eproto;
};
// -------------------------------------------------------------------

class data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Parsimony.data) */ {
 public:
  inline data() : data(nullptr) {}
  ~data() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(data* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(data));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR data(
      ::google::protobuf::internal::ConstantInitialized);

  inline data(const data& from) : data(nullptr, from) {}
  inline data(data&& from) noexcept
      : data(nullptr, std::move(from)) {}
  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }
  inline data& operator=(data&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const data& default_instance() {
    return *internal_default_instance();
  }
  static inline const data* internal_default_instance() {
    return reinterpret_cast<const data*>(
        &_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(data& a, data& b) { a.Swap(&b); }
  inline void Swap(data* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  data* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const data& from) { data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(data* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Parsimony.data"; }

 protected:
  explicit data(::google::protobuf::Arena* arena);
  data(::google::protobuf::Arena* arena, const data& from);
  data(::google::protobuf::Arena* arena, data&& from) noexcept
      : data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNodeMutationsFieldNumber = 2,
    kCondensedNodesFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kNewickFieldNumber = 1,
  };
  // repeated .Parsimony.mutation_list node_mutations = 2;
  int node_mutations_size() const;
  private:
  int _internal_node_mutations_size() const;

  public:
  void clear_node_mutations() ;
  ::Parsimony::mutation_list* mutable_node_mutations(int index);
  ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>* mutable_node_mutations();

  private:
  const ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>& _internal_node_mutations() const;
  ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>* _internal_mutable_node_mutations();
  public:
  const ::Parsimony::mutation_list& node_mutations(int index) const;
  ::Parsimony::mutation_list* add_node_mutations();
  const ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>& node_mutations() const;
  // repeated .Parsimony.condensed_node condensed_nodes = 3;
  int condensed_nodes_size() const;
  private:
  int _internal_condensed_nodes_size() const;

  public:
  void clear_condensed_nodes() ;
  ::Parsimony::condensed_node* mutable_condensed_nodes(int index);
  ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>* mutable_condensed_nodes();

  private:
  const ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>& _internal_condensed_nodes() const;
  ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>* _internal_mutable_condensed_nodes();
  public:
  const ::Parsimony::condensed_node& condensed_nodes(int index) const;
  ::Parsimony::condensed_node* add_condensed_nodes();
  const ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>& condensed_nodes() const;
  // repeated .Parsimony.node_metadata metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  ::Parsimony::node_metadata* mutable_metadata(int index);
  ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>* mutable_metadata();

  private:
  const ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>& _internal_metadata() const;
  ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>* _internal_mutable_metadata();
  public:
  const ::Parsimony::node_metadata& metadata(int index) const;
  ::Parsimony::node_metadata* add_metadata();
  const ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>& metadata() const;
  // string newick = 1;
  void clear_newick() ;
  const std::string& newick() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_newick(Arg_&& arg, Args_... args);
  std::string* mutable_newick();
  PROTOBUF_NODISCARD std::string* release_newick();
  void set_allocated_newick(std::string* value);

  private:
  const std::string& _internal_newick() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_newick(
      const std::string& value);
  std::string* _internal_mutable_newick();

  public:
  // @@protoc_insertion_point(class_scope:Parsimony.data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      29, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const data& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Parsimony::mutation_list > node_mutations_;
    ::google::protobuf::RepeatedPtrField< ::Parsimony::condensed_node > condensed_nodes_;
    ::google::protobuf::RepeatedPtrField< ::Parsimony::node_metadata > metadata_;
    ::google::protobuf::internal::ArenaStringPtr newick_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_parsimony_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// mut

// int32 position = 1;
inline void mut::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_ = 0;
}
inline ::int32_t mut::position() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.position)
  return _internal_position();
}
inline void mut::set_position(::int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.position)
}
inline ::int32_t mut::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_;
}
inline void mut::_internal_set_position(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_ = value;
}

// int32 ref_nuc = 2;
inline void mut::clear_ref_nuc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_nuc_ = 0;
}
inline ::int32_t mut::ref_nuc() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.ref_nuc)
  return _internal_ref_nuc();
}
inline void mut::set_ref_nuc(::int32_t value) {
  _internal_set_ref_nuc(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.ref_nuc)
}
inline ::int32_t mut::_internal_ref_nuc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ref_nuc_;
}
inline void mut::_internal_set_ref_nuc(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ref_nuc_ = value;
}

// int32 par_nuc = 3;
inline void mut::clear_par_nuc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.par_nuc_ = 0;
}
inline ::int32_t mut::par_nuc() const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.par_nuc)
  return _internal_par_nuc();
}
inline void mut::set_par_nuc(::int32_t value) {
  _internal_set_par_nuc(value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.par_nuc)
}
inline ::int32_t mut::_internal_par_nuc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.par_nuc_;
}
inline void mut::_internal_set_par_nuc(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.par_nuc_ = value;
}

// repeated int32 mut_nuc = 4;
inline int mut::_internal_mut_nuc_size() const {
  return _internal_mut_nuc().size();
}
inline int mut::mut_nuc_size() const {
  return _internal_mut_nuc_size();
}
inline void mut::clear_mut_nuc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mut_nuc_.Clear();
}
inline ::int32_t mut::mut_nuc(int index) const {
  // @@protoc_insertion_point(field_get:Parsimony.mut.mut_nuc)
  return _internal_mut_nuc().Get(index);
}
inline void mut::set_mut_nuc(int index, ::int32_t value) {
  _internal_mutable_mut_nuc()->Set(index, value);
  // @@protoc_insertion_point(field_set:Parsimony.mut.mut_nuc)
}
inline void mut::add_mut_nuc(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_mut_nuc()->Add(value);
  // @@protoc_insertion_point(field_add:Parsimony.mut.mut_nuc)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& mut::mut_nuc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.mut.mut_nuc)
  return _internal_mut_nuc();
}
inline ::google::protobuf::RepeatedField<::int32_t>* mut::mutable_mut_nuc()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.mut.mut_nuc)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mut_nuc();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
mut::_internal_mut_nuc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mut_nuc_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* mut::_internal_mutable_mut_nuc() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mut_nuc_;
}

// string chromosome = 5;
inline void mut::clear_chromosome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chromosome_.ClearToEmpty();
}
inline const std::string& mut::chromosome() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.mut.chromosome)
  return _internal_chromosome();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void mut::set_chromosome(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chromosome_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Parsimony.mut.chromosome)
}
inline std::string* mut::mutable_chromosome() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chromosome();
  // @@protoc_insertion_point(field_mutable:Parsimony.mut.chromosome)
  return _s;
}
inline const std::string& mut::_internal_chromosome() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.chromosome_.Get();
}
inline void mut::_internal_set_chromosome(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chromosome_.Set(value, GetArena());
}
inline std::string* mut::_internal_mutable_chromosome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.chromosome_.Mutable( GetArena());
}
inline std::string* mut::release_chromosome() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Parsimony.mut.chromosome)
  return _impl_.chromosome_.Release();
}
inline void mut::set_allocated_chromosome(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.chromosome_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.chromosome_.IsDefault()) {
    _impl_.chromosome_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Parsimony.mut.chromosome)
}

// -------------------------------------------------------------------

// mutation_list

// repeated .Parsimony.mut mutation = 1;
inline int mutation_list::_internal_mutation_size() const {
  return _internal_mutation().size();
}
inline int mutation_list::mutation_size() const {
  return _internal_mutation_size();
}
inline void mutation_list::clear_mutation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mutation_.Clear();
}
inline ::Parsimony::mut* mutation_list::mutable_mutation(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.mutation_list.mutation)
  return _internal_mutable_mutation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::mut>* mutation_list::mutable_mutation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.mutation_list.mutation)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_mutation();
}
inline const ::Parsimony::mut& mutation_list::mutation(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.mutation_list.mutation)
  return _internal_mutation().Get(index);
}
inline ::Parsimony::mut* mutation_list::add_mutation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Parsimony::mut* _add = _internal_mutable_mutation()->Add();
  // @@protoc_insertion_point(field_add:Parsimony.mutation_list.mutation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::mut>& mutation_list::mutation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.mutation_list.mutation)
  return _internal_mutation();
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::mut>&
mutation_list::_internal_mutation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mutation_;
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::mut>*
mutation_list::_internal_mutable_mutation() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.mutation_;
}

// -------------------------------------------------------------------

// condensed_node

// string node_name = 1;
inline void condensed_node::clear_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.ClearToEmpty();
}
inline const std::string& condensed_node::node_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.condensed_node.node_name)
  return _internal_node_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void condensed_node::set_node_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Parsimony.condensed_node.node_name)
}
inline std::string* condensed_node::mutable_node_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_node_name();
  // @@protoc_insertion_point(field_mutable:Parsimony.condensed_node.node_name)
  return _s;
}
inline const std::string& condensed_node::_internal_node_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_name_.Get();
}
inline void condensed_node::_internal_set_node_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.Set(value, GetArena());
}
inline std::string* condensed_node::_internal_mutable_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.node_name_.Mutable( GetArena());
}
inline std::string* condensed_node::release_node_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Parsimony.condensed_node.node_name)
  return _impl_.node_name_.Release();
}
inline void condensed_node::set_allocated_node_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.node_name_.IsDefault()) {
    _impl_.node_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Parsimony.condensed_node.node_name)
}

// repeated string condensed_leaves = 2;
inline int condensed_node::_internal_condensed_leaves_size() const {
  return _internal_condensed_leaves().size();
}
inline int condensed_node::condensed_leaves_size() const {
  return _internal_condensed_leaves_size();
}
inline void condensed_node::clear_condensed_leaves() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condensed_leaves_.Clear();
}
inline std::string* condensed_node::add_condensed_leaves() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_condensed_leaves()->Add();
  // @@protoc_insertion_point(field_add_mutable:Parsimony.condensed_node.condensed_leaves)
  return _s;
}
inline const std::string& condensed_node::condensed_leaves(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.condensed_node.condensed_leaves)
  return _internal_condensed_leaves().Get(index);
}
inline std::string* condensed_node::mutable_condensed_leaves(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.condensed_node.condensed_leaves)
  return _internal_mutable_condensed_leaves()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void condensed_node::set_condensed_leaves(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_condensed_leaves()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:Parsimony.condensed_node.condensed_leaves)
}
template <typename Arg_, typename... Args_>
inline void condensed_node::add_condensed_leaves(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_condensed_leaves(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:Parsimony.condensed_node.condensed_leaves)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
condensed_node::condensed_leaves() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.condensed_node.condensed_leaves)
  return _internal_condensed_leaves();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
condensed_node::mutable_condensed_leaves() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.condensed_node.condensed_leaves)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condensed_leaves();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
condensed_node::_internal_condensed_leaves() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condensed_leaves_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
condensed_node::_internal_mutable_condensed_leaves() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condensed_leaves_;
}

// -------------------------------------------------------------------

// node_metadata

// repeated string clade_annotations = 1;
inline int node_metadata::_internal_clade_annotations_size() const {
  return _internal_clade_annotations().size();
}
inline int node_metadata::clade_annotations_size() const {
  return _internal_clade_annotations_size();
}
inline void node_metadata::clear_clade_annotations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.clade_annotations_.Clear();
}
inline std::string* node_metadata::add_clade_annotations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_clade_annotations()->Add();
  // @@protoc_insertion_point(field_add_mutable:Parsimony.node_metadata.clade_annotations)
  return _s;
}
inline const std::string& node_metadata::clade_annotations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.node_metadata.clade_annotations)
  return _internal_clade_annotations().Get(index);
}
inline std::string* node_metadata::mutable_clade_annotations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.node_metadata.clade_annotations)
  return _internal_mutable_clade_annotations()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void node_metadata::set_clade_annotations(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_clade_annotations()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:Parsimony.node_metadata.clade_annotations)
}
template <typename Arg_, typename... Args_>
inline void node_metadata::add_clade_annotations(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_clade_annotations(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:Parsimony.node_metadata.clade_annotations)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
node_metadata::clade_annotations() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.node_metadata.clade_annotations)
  return _internal_clade_annotations();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
node_metadata::mutable_clade_annotations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.node_metadata.clade_annotations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_clade_annotations();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
node_metadata::_internal_clade_annotations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.clade_annotations_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
node_metadata::_internal_mutable_clade_annotations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.clade_annotations_;
}

// -------------------------------------------------------------------

// data

// string newick = 1;
inline void data::clear_newick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.newick_.ClearToEmpty();
}
inline const std::string& data::newick() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.data.newick)
  return _internal_newick();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void data::set_newick(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.newick_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Parsimony.data.newick)
}
inline std::string* data::mutable_newick() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_newick();
  // @@protoc_insertion_point(field_mutable:Parsimony.data.newick)
  return _s;
}
inline const std::string& data::_internal_newick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.newick_.Get();
}
inline void data::_internal_set_newick(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.newick_.Set(value, GetArena());
}
inline std::string* data::_internal_mutable_newick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.newick_.Mutable( GetArena());
}
inline std::string* data::release_newick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Parsimony.data.newick)
  return _impl_.newick_.Release();
}
inline void data::set_allocated_newick(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.newick_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.newick_.IsDefault()) {
    _impl_.newick_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Parsimony.data.newick)
}

// repeated .Parsimony.mutation_list node_mutations = 2;
inline int data::_internal_node_mutations_size() const {
  return _internal_node_mutations().size();
}
inline int data::node_mutations_size() const {
  return _internal_node_mutations_size();
}
inline void data::clear_node_mutations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.node_mutations_.Clear();
}
inline ::Parsimony::mutation_list* data::mutable_node_mutations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.node_mutations)
  return _internal_mutable_node_mutations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>* data::mutable_node_mutations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.node_mutations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_node_mutations();
}
inline const ::Parsimony::mutation_list& data::node_mutations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.data.node_mutations)
  return _internal_node_mutations().Get(index);
}
inline ::Parsimony::mutation_list* data::add_node_mutations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Parsimony::mutation_list* _add = _internal_mutable_node_mutations()->Add();
  // @@protoc_insertion_point(field_add:Parsimony.data.node_mutations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>& data::node_mutations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.data.node_mutations)
  return _internal_node_mutations();
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>&
data::_internal_node_mutations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.node_mutations_;
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::mutation_list>*
data::_internal_mutable_node_mutations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.node_mutations_;
}

// repeated .Parsimony.condensed_node condensed_nodes = 3;
inline int data::_internal_condensed_nodes_size() const {
  return _internal_condensed_nodes().size();
}
inline int data::condensed_nodes_size() const {
  return _internal_condensed_nodes_size();
}
inline void data::clear_condensed_nodes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.condensed_nodes_.Clear();
}
inline ::Parsimony::condensed_node* data::mutable_condensed_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.condensed_nodes)
  return _internal_mutable_condensed_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>* data::mutable_condensed_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.condensed_nodes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_condensed_nodes();
}
inline const ::Parsimony::condensed_node& data::condensed_nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.data.condensed_nodes)
  return _internal_condensed_nodes().Get(index);
}
inline ::Parsimony::condensed_node* data::add_condensed_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Parsimony::condensed_node* _add = _internal_mutable_condensed_nodes()->Add();
  // @@protoc_insertion_point(field_add:Parsimony.data.condensed_nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>& data::condensed_nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.data.condensed_nodes)
  return _internal_condensed_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>&
data::_internal_condensed_nodes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.condensed_nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::condensed_node>*
data::_internal_mutable_condensed_nodes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.condensed_nodes_;
}

// repeated .Parsimony.node_metadata metadata = 4;
inline int data::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int data::metadata_size() const {
  return _internal_metadata_size();
}
inline void data::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
inline ::Parsimony::node_metadata* data::mutable_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Parsimony.data.metadata)
  return _internal_mutable_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>* data::mutable_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Parsimony.data.metadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_metadata();
}
inline const ::Parsimony::node_metadata& data::metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Parsimony.data.metadata)
  return _internal_metadata().Get(index);
}
inline ::Parsimony::node_metadata* data::add_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Parsimony::node_metadata* _add = _internal_mutable_metadata()->Add();
  // @@protoc_insertion_point(field_add:Parsimony.data.metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>& data::metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Parsimony.data.metadata)
  return _internal_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>&
data::_internal_metadata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::Parsimony::node_metadata>*
data::_internal_mutable_metadata() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.metadata_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Parsimony


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // parsimony_2eproto_2epb_2eh
